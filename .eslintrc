{
  "root": true,
  "env": {
    "node": true,
    "jest": true,
    "jest/globals": true
  },
  "parser": "@typescript-eslint/parser",
  "extends": [
    "airbnb-base",
    "airbnb-typescript/base",
    "plugin:@typescript-eslint/eslint-recommended",
    "plugin:@typescript-eslint/recommended",
    "plugin:jest/recommended",
    "plugin:security/recommended",
    "plugin:prettier/recommended"
  ],
  "plugins": ["jest", "security", "prettier", "@typescript-eslint"],
  "parserOptions": {
    "ecmaVersion": "latest",
    "project": ["./tsconfig.json"]
  },
  "settings": {
    "import/resolver": {
      "node": {
        "paths": ["src"],
        "extensions": [".js", ".jsx", ".ts", ".tsx"]
      }
    }
  },
  "rules": {
    "no-console": "error",
    "prettier/prettier": [
      "error",
      {
        "endOfLine": "auto"
      }
    ],
    "import/extensions": "off",
    "import/prefer-default-export": "off",
    "no-underscore-dangle": "off",
    "no-unused-vars": "off",
    "@typescript-eslint/no-unused-vars": "error",
    "lines-between-class-members": "off",
    "@typescript-eslint/lines-between-class-members": ["error", "always", { "exceptAfterSingleLine": true }],
    "@typescript-eslint/no-namespace": "off",
    "security/detect-object-injection": "off",
    "class-methods-use-this": "off",
    "dot-notation": "warn",
    "no-new": "warn",
    "import/no-cycle": "off",
    "max-classes-per-file": "off",
    "no-use-before-define": "off",
    "@typescript-eslint/no-use-before-define": "off",
    "import/no-extraneous-dependencies": [
      "error",
      { "devDependencies": ["**/*.test.ts", "**/*.spec.ts", "**/*.fixture.ts"] }
    ],
    "@typescript-eslint/naming-convention": [
      "error",
      {
        "selector": "variable",
        "types": ["boolean"],
        "format": ["PascalCase"],
        "prefix": ["is", "should", "has", "can", "did", "will"]
      },
      {
        "selector": "typeParameter",
        "format": ["PascalCase"],
        "prefix": ["T"]
      },
      {
        "selector": "interface",
        "format": ["PascalCase"],
        "custom": {
          "regex": "^I[A-Z]",
          "match": false
        }
      },
      {
        "selector": "variable",
        "modifiers": ["destructured"],
        "format": null
      },
      {
        "selector": "typeLike",
        "format": ["PascalCase"]
      },
      {
        "selector": ["parameter", "function"],
        "format": ["camelCase"],
        "leadingUnderscore": "allow"
      },
      {
        "selector": ["variable"],
        "format": ["camelCase", "UPPER_CASE"],
        "leadingUnderscore": "allow"
      },
      {
        "selector": "class",
        "modifiers": ["abstract"],
        "format": ["PascalCase"],
        "leadingUnderscore": "allow"
      }
    ],
    "no-restricted-syntax": [
      "error",
      {
        "selector": "ForInStatement",
        "message": "for..in loops iterate over the entire prototype chain, which is virtually never what you want. Use Object.{keys,values,entries}, and iterate over the resulting array."
      },
      {
        "selector": "LabeledStatement",
        "message": "Labels are a form of GOTO; using them makes code confusing and hard to maintain and understand."
      },
      {
        "selector": "WithStatement",
        "message": "`with` is disallowed in strict mode because it makes code impossible to predict and optimize."
      }
    ],
    "no-plusplus": ["error", { "allowForLoopAfterthoughts": true }],
    "@typescript-eslint/no-explicit-any": "warn"
  }
}
